#!/usr/bin/env -S node --expose-internals

// @ts-check

// @ts-expect-error
const table = require('internal/cli_table');
const util = require('util');

const keys = [.../** @type {const} */ (['uid', 'email', 'd', 'c', 'p', 'oldUid'])];
/** @type {Record<typeof keys[number], string>[]} */
const rows = [];
const customClaimsDict = {};
const customClaimsToID = (customClaims) => {
  if (!customClaims) {
    return String(customClaims);
  }

  const str = JSON.stringify({ ...customClaims, oldUid: undefined });
  if (!customClaimsDict[str]) {
    const expired = customClaims.expiresAfter && new Date() > new Date(customClaims.expiresAfter);
    customClaimsDict[str] = Object.keys(customClaimsDict).length + 1 + (expired ? 'X' : '');
  }
  return customClaimsDict[str];
};

process.stdin.setEncoding('utf8');
const reader = require('readline').createInterface({ input: process.stdin });
reader.on('line', (line) => {
  const { uid, email, disabled, customClaims, providerData } =
    /** @type {import('firebase-admin').auth.ListUsersResult['users'][0]} */ (JSON.parse(line));

  rows.push({
    uid,
    email: String(email),
    d: disabled ? 'Dis' : '',
    c: customClaimsToID(customClaims),
    p: providerData.map(({ providerId }) => providerId.charAt(0).toUpperCase()).join(', '),
    oldUid: customClaims?.oldUid,
  });
});

reader.on('close', () => {
  const longestEmailLength = Math.max(...rows.map(({ email }) => email.length));
  rows.forEach((row) => (row.email = row.email.padStart(longestEmailLength)));

  if (rows.every(({ oldUid }) => !oldUid)) {
    keys.splice(5, 1);
  } else {
    rows.forEach((row) => (row.oldUid = util.inspect(row.oldUid, { colors: true })));
  }

  console.log(
    table(
      keys.map((key) => key + '(' + new Set(rows.map((row) => row[key])).size + ')'),
      keys.map((key) => rows.map((row) => row[key]))
    )
  );

  console.table(Object.fromEntries(Object.entries(customClaimsDict).map(([str, id]) => [id, JSON.parse(str)])));
});
