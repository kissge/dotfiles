#!/usr/bin/env node --expose-internals

const table = require('internal/cli_table');
const util = require('util');

const keys = ['uid', 'email', 'd', 'c', 'pr', 'oldUid'];
/** @type string[][] */
const lines = keys.map(() => []);
const customClaimsDict = {};
const customClaimsToID = (customClaims) => {
  if (!customClaims) {
    return String(customClaims);
  }

  const str = JSON.stringify({ ...customClaims, oldUid: undefined });
  if (!customClaimsDict[str]) {
    const expired = customClaims.expiresAfter && new Date() > new Date(customClaims.expiresAfter);
    customClaimsDict[str] = Object.keys(customClaimsDict).length + 1 + (expired ? 'X' : '');
  }
  return customClaimsDict[str];
};

process.stdin.setEncoding('utf8');
const reader = require('readline').createInterface({ input: process.stdin });
reader.on('line', (line) => {
  const { uid, email, disabled, customClaims, providerData } =
    /** @type {import('firebase-admin').auth.ListUsersResult['users'][0]} */ (JSON.parse(line));

  lines[0].push(uid);
  lines[1].push(String(email));
  lines[2].push(disabled ? 'D' : '');
  lines[3].push(customClaimsToID(customClaims));
  lines[4].push(providerData.map(({ providerId }) => providerId.slice(0, 2)).join(', '));
  lines[5].push(customClaims?.oldUid);
});
reader.on('close', () => {
  const longestEmailLength = Math.max(...lines[1].map((email) => email.length));
  lines[1] = lines[1].map((email) => email.padStart(longestEmailLength));

  if (lines[5].every((uid) => !uid)) {
    keys.splice(5, 1);
    lines.splice(5, 1);
  } else {
    lines[5] = lines[5].map((uid) => util.inspect(uid, { colors: true }));
  }

  console.log(table(keys, lines));

  Object.entries(customClaimsDict)
    .sort(([, id1], [, id2]) => id1.localeCompare(id2))
    .forEach(([str, id]) => {
      console.log(
        id +
          '\t' +
          (str === 'undefined' ? undefined : util.inspect(JSON.parse(str), { breakLength: Infinity, colors: true }))
      );
    });
});
